/**
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.mGPL.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.mydsl.mGPL.AssStmt;
import org.xtext.example.mydsl.mGPL.Expression;
import org.xtext.example.mydsl.mGPL.ForStmt;
import org.xtext.example.mydsl.mGPL.MGPLPackage;
import org.xtext.example.mydsl.mGPL.StmtBlock;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>For Stmt</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.mGPL.impl.ForStmtImpl#getInitStmt <em>Init Stmt</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.mGPL.impl.ForStmtImpl#getEndCondition <em>End Condition</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.mGPL.impl.ForStmtImpl#getLoopStmt <em>Loop Stmt</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.mGPL.impl.ForStmtImpl#getStmtBlock <em>Stmt Block</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ForStmtImpl extends StmtImpl implements ForStmt
{
  /**
   * The cached value of the '{@link #getInitStmt() <em>Init Stmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitStmt()
   * @generated
   * @ordered
   */
  protected AssStmt initStmt;

  /**
   * The cached value of the '{@link #getEndCondition() <em>End Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEndCondition()
   * @generated
   * @ordered
   */
  protected Expression endCondition;

  /**
   * The cached value of the '{@link #getLoopStmt() <em>Loop Stmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLoopStmt()
   * @generated
   * @ordered
   */
  protected AssStmt loopStmt;

  /**
   * The cached value of the '{@link #getStmtBlock() <em>Stmt Block</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStmtBlock()
   * @generated
   * @ordered
   */
  protected StmtBlock stmtBlock;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ForStmtImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MGPLPackage.Literals.FOR_STMT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssStmt getInitStmt()
  {
    return initStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInitStmt(AssStmt newInitStmt, NotificationChain msgs)
  {
    AssStmt oldInitStmt = initStmt;
    initStmt = newInitStmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MGPLPackage.FOR_STMT__INIT_STMT, oldInitStmt, newInitStmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInitStmt(AssStmt newInitStmt)
  {
    if (newInitStmt != initStmt)
    {
      NotificationChain msgs = null;
      if (initStmt != null)
        msgs = ((InternalEObject)initStmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MGPLPackage.FOR_STMT__INIT_STMT, null, msgs);
      if (newInitStmt != null)
        msgs = ((InternalEObject)newInitStmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MGPLPackage.FOR_STMT__INIT_STMT, null, msgs);
      msgs = basicSetInitStmt(newInitStmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MGPLPackage.FOR_STMT__INIT_STMT, newInitStmt, newInitStmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getEndCondition()
  {
    return endCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEndCondition(Expression newEndCondition, NotificationChain msgs)
  {
    Expression oldEndCondition = endCondition;
    endCondition = newEndCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MGPLPackage.FOR_STMT__END_CONDITION, oldEndCondition, newEndCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEndCondition(Expression newEndCondition)
  {
    if (newEndCondition != endCondition)
    {
      NotificationChain msgs = null;
      if (endCondition != null)
        msgs = ((InternalEObject)endCondition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MGPLPackage.FOR_STMT__END_CONDITION, null, msgs);
      if (newEndCondition != null)
        msgs = ((InternalEObject)newEndCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MGPLPackage.FOR_STMT__END_CONDITION, null, msgs);
      msgs = basicSetEndCondition(newEndCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MGPLPackage.FOR_STMT__END_CONDITION, newEndCondition, newEndCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssStmt getLoopStmt()
  {
    return loopStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLoopStmt(AssStmt newLoopStmt, NotificationChain msgs)
  {
    AssStmt oldLoopStmt = loopStmt;
    loopStmt = newLoopStmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MGPLPackage.FOR_STMT__LOOP_STMT, oldLoopStmt, newLoopStmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLoopStmt(AssStmt newLoopStmt)
  {
    if (newLoopStmt != loopStmt)
    {
      NotificationChain msgs = null;
      if (loopStmt != null)
        msgs = ((InternalEObject)loopStmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MGPLPackage.FOR_STMT__LOOP_STMT, null, msgs);
      if (newLoopStmt != null)
        msgs = ((InternalEObject)newLoopStmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MGPLPackage.FOR_STMT__LOOP_STMT, null, msgs);
      msgs = basicSetLoopStmt(newLoopStmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MGPLPackage.FOR_STMT__LOOP_STMT, newLoopStmt, newLoopStmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StmtBlock getStmtBlock()
  {
    return stmtBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStmtBlock(StmtBlock newStmtBlock, NotificationChain msgs)
  {
    StmtBlock oldStmtBlock = stmtBlock;
    stmtBlock = newStmtBlock;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MGPLPackage.FOR_STMT__STMT_BLOCK, oldStmtBlock, newStmtBlock);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStmtBlock(StmtBlock newStmtBlock)
  {
    if (newStmtBlock != stmtBlock)
    {
      NotificationChain msgs = null;
      if (stmtBlock != null)
        msgs = ((InternalEObject)stmtBlock).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MGPLPackage.FOR_STMT__STMT_BLOCK, null, msgs);
      if (newStmtBlock != null)
        msgs = ((InternalEObject)newStmtBlock).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MGPLPackage.FOR_STMT__STMT_BLOCK, null, msgs);
      msgs = basicSetStmtBlock(newStmtBlock, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MGPLPackage.FOR_STMT__STMT_BLOCK, newStmtBlock, newStmtBlock));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MGPLPackage.FOR_STMT__INIT_STMT:
        return basicSetInitStmt(null, msgs);
      case MGPLPackage.FOR_STMT__END_CONDITION:
        return basicSetEndCondition(null, msgs);
      case MGPLPackage.FOR_STMT__LOOP_STMT:
        return basicSetLoopStmt(null, msgs);
      case MGPLPackage.FOR_STMT__STMT_BLOCK:
        return basicSetStmtBlock(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MGPLPackage.FOR_STMT__INIT_STMT:
        return getInitStmt();
      case MGPLPackage.FOR_STMT__END_CONDITION:
        return getEndCondition();
      case MGPLPackage.FOR_STMT__LOOP_STMT:
        return getLoopStmt();
      case MGPLPackage.FOR_STMT__STMT_BLOCK:
        return getStmtBlock();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MGPLPackage.FOR_STMT__INIT_STMT:
        setInitStmt((AssStmt)newValue);
        return;
      case MGPLPackage.FOR_STMT__END_CONDITION:
        setEndCondition((Expression)newValue);
        return;
      case MGPLPackage.FOR_STMT__LOOP_STMT:
        setLoopStmt((AssStmt)newValue);
        return;
      case MGPLPackage.FOR_STMT__STMT_BLOCK:
        setStmtBlock((StmtBlock)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MGPLPackage.FOR_STMT__INIT_STMT:
        setInitStmt((AssStmt)null);
        return;
      case MGPLPackage.FOR_STMT__END_CONDITION:
        setEndCondition((Expression)null);
        return;
      case MGPLPackage.FOR_STMT__LOOP_STMT:
        setLoopStmt((AssStmt)null);
        return;
      case MGPLPackage.FOR_STMT__STMT_BLOCK:
        setStmtBlock((StmtBlock)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MGPLPackage.FOR_STMT__INIT_STMT:
        return initStmt != null;
      case MGPLPackage.FOR_STMT__END_CONDITION:
        return endCondition != null;
      case MGPLPackage.FOR_STMT__LOOP_STMT:
        return loopStmt != null;
      case MGPLPackage.FOR_STMT__STMT_BLOCK:
        return stmtBlock != null;
    }
    return super.eIsSet(featureID);
  }

} //ForStmtImpl
