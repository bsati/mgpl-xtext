/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MGPLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class GameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.Game");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttrAssListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttrAssListAttrAssListParserRuleCall_3_0 = (RuleCall)cAttrAssListAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDeclAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDeclDeclParserRuleCall_5_0 = (RuleCall)cDeclAssignment_5.eContents().get(0);
		private final Assignment cInitBlockAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInitBlockStmtBlockParserRuleCall_6_0 = (RuleCall)cInitBlockAssignment_6.eContents().get(0);
		private final Assignment cFunctionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cFunctionsBlockParserRuleCall_7_0 = (RuleCall)cFunctionsAssignment_7.eContents().get(0);
		
		//Game:
		//	'game' name=ID '(' attrAssList=AttrAssList? ')' decl+=Decl* initBlock=StmtBlock functions+=Block*;
		@Override public ParserRule getRule() { return rule; }
		
		//'game' name=ID '(' attrAssList=AttrAssList? ')' decl+=Decl* initBlock=StmtBlock functions+=Block*
		public Group getGroup() { return cGroup; }
		
		//'game'
		public Keyword getGameKeyword_0() { return cGameKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//attrAssList=AttrAssList?
		public Assignment getAttrAssListAssignment_3() { return cAttrAssListAssignment_3; }
		
		//AttrAssList
		public RuleCall getAttrAssListAttrAssListParserRuleCall_3_0() { return cAttrAssListAttrAssListParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//decl+=Decl*
		public Assignment getDeclAssignment_5() { return cDeclAssignment_5; }
		
		//Decl
		public RuleCall getDeclDeclParserRuleCall_5_0() { return cDeclDeclParserRuleCall_5_0; }
		
		//initBlock=StmtBlock
		public Assignment getInitBlockAssignment_6() { return cInitBlockAssignment_6; }
		
		//StmtBlock
		public RuleCall getInitBlockStmtBlockParserRuleCall_6_0() { return cInitBlockStmtBlockParserRuleCall_6_0; }
		
		//functions+=Block*
		public Assignment getFunctionsAssignment_7() { return cFunctionsAssignment_7; }
		
		//Block
		public RuleCall getFunctionsBlockParserRuleCall_7_0() { return cFunctionsBlockParserRuleCall_7_0; }
	}
	public class DeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.Decl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cVarDeclParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cObjDeclParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Decl:
		//	VarDecl ';' | ObjDecl ';';
		@Override public ParserRule getRule() { return rule; }
		
		//VarDecl ';' | ObjDecl ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VarDecl ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//VarDecl
		public RuleCall getVarDeclParserRuleCall_0_0() { return cVarDeclParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//ObjDecl ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//ObjDecl
		public RuleCall getObjDeclParserRuleCall_1_0() { return cObjDeclParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.VarDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cTypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cTypeIntKeyword_0_0_0 = (Keyword)cTypeAssignment_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueInitParserRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cTypeIntKeyword_1_0_0 = (Keyword)cTypeAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cArrSizeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cArrSizeINTTerminalRuleCall_1_3_0 = (RuleCall)cArrSizeAssignment_1_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//VarDecl:
		//	type='int' name=ID value=Init? | type='int' name=ID '[' arrSize=INT ']';
		@Override public ParserRule getRule() { return rule; }
		
		//type='int' name=ID value=Init? | type='int' name=ID '[' arrSize=INT ']'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//type='int' name=ID value=Init?
		public Group getGroup_0() { return cGroup_0; }
		
		//type='int'
		public Assignment getTypeAssignment_0_0() { return cTypeAssignment_0_0; }
		
		//'int'
		public Keyword getTypeIntKeyword_0_0_0() { return cTypeIntKeyword_0_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//value=Init?
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }
		
		//Init
		public RuleCall getValueInitParserRuleCall_0_2_0() { return cValueInitParserRuleCall_0_2_0; }
		
		//type='int' name=ID '[' arrSize=INT ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//type='int'
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }
		
		//'int'
		public Keyword getTypeIntKeyword_1_0_0() { return cTypeIntKeyword_1_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_2() { return cLeftSquareBracketKeyword_1_2; }
		
		//arrSize=INT
		public Assignment getArrSizeAssignment_1_3() { return cArrSizeAssignment_1_3; }
		
		//INT
		public RuleCall getArrSizeINTTerminalRuleCall_1_3_0() { return cArrSizeINTTerminalRuleCall_1_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_4() { return cRightSquareBracketKeyword_1_4; }
	}
	public class InitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.Init");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//Init:
		//	'=' expr=Expr;
		@Override public ParserRule getRule() { return rule; }
		
		//'=' expr=Expr
		public Group getGroup() { return cGroup; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//expr=Expr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_1_0() { return cExprExprParserRuleCall_1_0; }
	}
	public class ObjDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.ObjDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cTypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cTypeOBJTYPETerminalRuleCall_0_0_0 = (RuleCall)cTypeAssignment_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cAttrAssListAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cAttrAssListAttrAssListParserRuleCall_0_3_0 = (RuleCall)cAttrAssListAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTypeOBJTYPETerminalRuleCall_1_0_0 = (RuleCall)cTypeAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cArrSizeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cArrSizeINTTerminalRuleCall_1_3_0 = (RuleCall)cArrSizeAssignment_1_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//ObjDecl:
		//	type=OBJTYPE name=ID '(' attrAssList=AttrAssList? ')' | type=OBJTYPE name=ID '[' arrSize=INT ']';
		@Override public ParserRule getRule() { return rule; }
		
		//type=OBJTYPE name=ID '(' attrAssList=AttrAssList? ')' | type=OBJTYPE name=ID '[' arrSize=INT ']'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//type=OBJTYPE name=ID '(' attrAssList=AttrAssList? ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//type=OBJTYPE
		public Assignment getTypeAssignment_0_0() { return cTypeAssignment_0_0; }
		
		//OBJTYPE
		public RuleCall getTypeOBJTYPETerminalRuleCall_0_0_0() { return cTypeOBJTYPETerminalRuleCall_0_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//attrAssList=AttrAssList?
		public Assignment getAttrAssListAssignment_0_3() { return cAttrAssListAssignment_0_3; }
		
		//AttrAssList
		public RuleCall getAttrAssListAttrAssListParserRuleCall_0_3_0() { return cAttrAssListAttrAssListParserRuleCall_0_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//type=OBJTYPE name=ID '[' arrSize=INT ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//type=OBJTYPE
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }
		
		//OBJTYPE
		public RuleCall getTypeOBJTYPETerminalRuleCall_1_0_0() { return cTypeOBJTYPETerminalRuleCall_1_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_2() { return cLeftSquareBracketKeyword_1_2; }
		
		//arrSize=INT
		public Assignment getArrSizeAssignment_1_3() { return cArrSizeAssignment_1_3; }
		
		//INT
		public RuleCall getArrSizeINTTerminalRuleCall_1_3_0() { return cArrSizeINTTerminalRuleCall_1_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_4() { return cRightSquareBracketKeyword_1_4; }
	}
	public class AttrAssListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.AttrAssList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttrAssAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttrAssAttrAssParserRuleCall_0_0 = (RuleCall)cAttrAssAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAttrAssAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAttrAssAttrAssParserRuleCall_1_1_0 = (RuleCall)cAttrAssAssignment_1_1.eContents().get(0);
		
		//AttrAssList:
		//	attrAss+=AttrAss (',' attrAss+=AttrAss)*;
		@Override public ParserRule getRule() { return rule; }
		
		//attrAss+=AttrAss (',' attrAss+=AttrAss)*
		public Group getGroup() { return cGroup; }
		
		//attrAss+=AttrAss
		public Assignment getAttrAssAssignment_0() { return cAttrAssAssignment_0; }
		
		//AttrAss
		public RuleCall getAttrAssAttrAssParserRuleCall_0_0() { return cAttrAssAttrAssParserRuleCall_0_0; }
		
		//(',' attrAss+=AttrAss)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//attrAss+=AttrAss
		public Assignment getAttrAssAssignment_1_1() { return cAttrAssAssignment_1_1; }
		
		//AttrAss
		public RuleCall getAttrAssAttrAssParserRuleCall_1_1_0() { return cAttrAssAttrAssParserRuleCall_1_1_0; }
	}
	public class AttrAssElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.AttrAss");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//AttrAss:
		//	name=ID '=' expr=Expr;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' expr=Expr
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//expr=Expr
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_2_0() { return cExprExprParserRuleCall_2_0; }
	}
	public class StmtBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.StmtBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatmentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatmentsStmtParserRuleCall_1_0 = (RuleCall)cStatmentsAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//StmtBlock:
		//	'{' statments+=Stmt* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' statments+=Stmt* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//statments+=Stmt*
		public Assignment getStatmentsAssignment_1() { return cStatmentsAssignment_1; }
		
		//Stmt
		public RuleCall getStatmentsStmtParserRuleCall_1_0() { return cStatmentsStmtParserRuleCall_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class StmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.Stmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfStmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForStmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cAssStmtParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//Stmt:
		//	IfStmt | ForStmt | AssStmt ';';
		@Override public ParserRule getRule() { return rule; }
		
		//IfStmt | ForStmt | AssStmt ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IfStmt
		public RuleCall getIfStmtParserRuleCall_0() { return cIfStmtParserRuleCall_0; }
		
		//ForStmt
		public RuleCall getForStmtParserRuleCall_1() { return cForStmtParserRuleCall_1; }
		
		//AssStmt ';'
		public Group getGroup_2() { return cGroup_2; }
		
		//AssStmt
		public RuleCall getAssStmtParserRuleCall_2_0() { return cAssStmtParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}
	public class IfStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.IfStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExprParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConsequenceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConsequenceStmtBlockParserRuleCall_4_0 = (RuleCall)cConsequenceAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAlternativeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAlternativeStmtBlockParserRuleCall_5_1_0 = (RuleCall)cAlternativeAssignment_5_1.eContents().get(0);
		
		//IfStmt:
		//	'if' '(' Expr ')' consequence=StmtBlock ('else' alternative=StmtBlock)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' Expr ')' consequence=StmtBlock ('else' alternative=StmtBlock)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//Expr
		public RuleCall getExprParserRuleCall_2() { return cExprParserRuleCall_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//consequence=StmtBlock
		public Assignment getConsequenceAssignment_4() { return cConsequenceAssignment_4; }
		
		//StmtBlock
		public RuleCall getConsequenceStmtBlockParserRuleCall_4_0() { return cConsequenceStmtBlockParserRuleCall_4_0; }
		
		//('else' alternative=StmtBlock)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//alternative=StmtBlock
		public Assignment getAlternativeAssignment_5_1() { return cAlternativeAssignment_5_1; }
		
		//StmtBlock
		public RuleCall getAlternativeStmtBlockParserRuleCall_5_1_0() { return cAlternativeStmtBlockParserRuleCall_5_1_0; }
	}
	public class ForStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.ForStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitStmtAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitStmtAssStmtParserRuleCall_2_0 = (RuleCall)cInitStmtAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEndConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEndConditionExprParserRuleCall_4_0 = (RuleCall)cEndConditionAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cLoopStmtAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLoopStmtAssStmtParserRuleCall_6_0 = (RuleCall)cLoopStmtAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cStmtBlockAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStmtBlockStmtBlockParserRuleCall_8_0 = (RuleCall)cStmtBlockAssignment_8.eContents().get(0);
		
		//ForStmt:
		//	'for' '(' initStmt=AssStmt ';' endCondition=Expr ';' loopStmt=AssStmt ')' stmtBlock=StmtBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' '(' initStmt=AssStmt ';' endCondition=Expr ';' loopStmt=AssStmt ')' stmtBlock=StmtBlock
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//initStmt=AssStmt
		public Assignment getInitStmtAssignment_2() { return cInitStmtAssignment_2; }
		
		//AssStmt
		public RuleCall getInitStmtAssStmtParserRuleCall_2_0() { return cInitStmtAssStmtParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//endCondition=Expr
		public Assignment getEndConditionAssignment_4() { return cEndConditionAssignment_4; }
		
		//Expr
		public RuleCall getEndConditionExprParserRuleCall_4_0() { return cEndConditionExprParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//loopStmt=AssStmt
		public Assignment getLoopStmtAssignment_6() { return cLoopStmtAssignment_6; }
		
		//AssStmt
		public RuleCall getLoopStmtAssStmtParserRuleCall_6_0() { return cLoopStmtAssStmtParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//stmtBlock=StmtBlock
		public Assignment getStmtBlockAssignment_8() { return cStmtBlockAssignment_8; }
		
		//StmtBlock
		public RuleCall getStmtBlockStmtBlockParserRuleCall_8_0() { return cStmtBlockStmtBlockParserRuleCall_8_0; }
	}
	public class AssStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.AssStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarVarParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAssignmentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAssignmentExprParserRuleCall_2_0 = (RuleCall)cAssignmentAssignment_2.eContents().get(0);
		
		//AssStmt:
		//	var=Var '=' assignment=Expr;
		@Override public ParserRule getRule() { return rule; }
		
		//var=Var '=' assignment=Expr
		public Group getGroup() { return cGroup; }
		
		//var=Var
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//Var
		public RuleCall getVarVarParserRuleCall_0_0() { return cVarVarParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//assignment=Expr
		public Assignment getAssignmentAssignment_2() { return cAssignmentAssignment_2; }
		
		//Expr
		public RuleCall getAssignmentExprParserRuleCall_2_0() { return cAssignmentExprParserRuleCall_2_0; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.Block");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnimBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEventBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Block:
		//	AnimBlock | EventBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//AnimBlock | EventBlock
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AnimBlock
		public RuleCall getAnimBlockParserRuleCall_0() { return cAnimBlockParserRuleCall_0; }
		
		//EventBlock
		public RuleCall getEventBlockParserRuleCall_1() { return cEventBlockParserRuleCall_1; }
	}
	public class AnimBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.AnimBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnimationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cObjTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjTypeOBJTYPETerminalRuleCall_3_0 = (RuleCall)cObjTypeAssignment_3.eContents().get(0);
		private final Assignment cObjNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cObjNameIDTerminalRuleCall_4_0 = (RuleCall)cObjNameAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStmtBlockAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStmtBlockStmtBlockParserRuleCall_6_0 = (RuleCall)cStmtBlockAssignment_6.eContents().get(0);
		
		//AnimBlock:
		//	'animation' name=ID '(' objType=OBJTYPE objName=ID ')' stmtBlock=StmtBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'animation' name=ID '(' objType=OBJTYPE objName=ID ')' stmtBlock=StmtBlock
		public Group getGroup() { return cGroup; }
		
		//'animation'
		public Keyword getAnimationKeyword_0() { return cAnimationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//objType=OBJTYPE
		public Assignment getObjTypeAssignment_3() { return cObjTypeAssignment_3; }
		
		//OBJTYPE
		public RuleCall getObjTypeOBJTYPETerminalRuleCall_3_0() { return cObjTypeOBJTYPETerminalRuleCall_3_0; }
		
		//objName=ID
		public Assignment getObjNameAssignment_4() { return cObjNameAssignment_4; }
		
		//ID
		public RuleCall getObjNameIDTerminalRuleCall_4_0() { return cObjNameIDTerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//stmtBlock=StmtBlock
		public Assignment getStmtBlockAssignment_6() { return cStmtBlockAssignment_6; }
		
		//StmtBlock
		public RuleCall getStmtBlockStmtBlockParserRuleCall_6_0() { return cStmtBlockStmtBlockParserRuleCall_6_0; }
	}
	public class EventBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.EventBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyKEYSTROKETerminalRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Assignment cStmtBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStmtBlockStmtBlockParserRuleCall_2_0 = (RuleCall)cStmtBlockAssignment_2.eContents().get(0);
		
		//EventBlock:
		//	'on' key=KEYSTROKE stmtBlock=StmtBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'on' key=KEYSTROKE stmtBlock=StmtBlock
		public Group getGroup() { return cGroup; }
		
		//'on'
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }
		
		//key=KEYSTROKE
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }
		
		//KEYSTROKE
		public RuleCall getKeyKEYSTROKETerminalRuleCall_1_0() { return cKeyKEYSTROKETerminalRuleCall_1_0; }
		
		//stmtBlock=StmtBlock
		public Assignment getStmtBlockAssignment_2() { return cStmtBlockAssignment_2; }
		
		//StmtBlock
		public RuleCall getStmtBlockStmtBlockParserRuleCall_2_0() { return cStmtBlockStmtBlockParserRuleCall_2_0; }
	}
	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.Var");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cVarArrayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarArrayVarArrayParserRuleCall_1_0 = (RuleCall)cVarArrayAssignment_1.eContents().get(0);
		private final Assignment cVarPropAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarPropVarPropParserRuleCall_2_0 = (RuleCall)cVarPropAssignment_2.eContents().get(0);
		
		//Var:
		//	name=ID varArray=VarArray? varProp=VarProp?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID varArray=VarArray? varProp=VarProp?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//varArray=VarArray?
		public Assignment getVarArrayAssignment_1() { return cVarArrayAssignment_1; }
		
		//VarArray
		public RuleCall getVarArrayVarArrayParserRuleCall_1_0() { return cVarArrayVarArrayParserRuleCall_1_0; }
		
		//varProp=VarProp?
		public Assignment getVarPropAssignment_2() { return cVarPropAssignment_2; }
		
		//VarProp
		public RuleCall getVarPropVarPropParserRuleCall_2_0() { return cVarPropVarPropParserRuleCall_2_0; }
	}
	public class VarArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.VarArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIndexExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndexExprExprParserRuleCall_1_0 = (RuleCall)cIndexExprAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//VarArray:
		//	'[' indexExpr=Expr ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' indexExpr=Expr ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//indexExpr=Expr
		public Assignment getIndexExprAssignment_1() { return cIndexExprAssignment_1; }
		
		//Expr
		public RuleCall getIndexExprExprParserRuleCall_1_0() { return cIndexExprExprParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class VarPropElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.VarProp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExtIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExtIdIDTerminalRuleCall_1_0 = (RuleCall)cExtIdAssignment_1.eContents().get(0);
		
		//VarProp:
		//	'.' extId=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'.' extId=ID
		public Group getGroup() { return cGroup; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//extId=ID
		public Assignment getExtIdAssignment_1() { return cExtIdAssignment_1; }
		
		//ID
		public RuleCall getExtIdIDTerminalRuleCall_1_0() { return cExtIdIDTerminalRuleCall_1_0; }
	}
	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.Expr");
		private final RuleCall cOrExprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expr Expression:
		//	OrExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//OrExpr
		public RuleCall getOrExprParserRuleCall() { return cOrExprParserRuleCall; }
	}
	public class OrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.OrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpORTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrExpr Expression:
		//	AndExpr ({Operation.left=current} op=OR right=AndExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpr ({Operation.left=current} op=OR right=AndExpr)*
		public Group getGroup() { return cGroup; }
		
		//AndExpr
		public RuleCall getAndExprParserRuleCall_0() { return cAndExprParserRuleCall_0; }
		
		//({Operation.left=current} op=OR right=AndExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Operation.left=current}
		public Action getOperationLeftAction_1_0() { return cOperationLeftAction_1_0; }
		
		//op=OR
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//OR
		public RuleCall getOpORTerminalRuleCall_1_1_0() { return cOpORTerminalRuleCall_1_1_0; }
		
		//right=AndExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndExpr
		public RuleCall getRightAndExprParserRuleCall_1_2_0() { return cRightAndExprParserRuleCall_1_2_0; }
	}
	public class AndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.AndExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpANDTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRelExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpr Expression:
		//	RelExpr ({Operation.left=current} op=AND right=RelExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//RelExpr ({Operation.left=current} op=AND right=RelExpr)*
		public Group getGroup() { return cGroup; }
		
		//RelExpr
		public RuleCall getRelExprParserRuleCall_0() { return cRelExprParserRuleCall_0; }
		
		//({Operation.left=current} op=AND right=RelExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Operation.left=current}
		public Action getOperationLeftAction_1_0() { return cOperationLeftAction_1_0; }
		
		//op=AND
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//AND
		public RuleCall getOpANDTerminalRuleCall_1_1_0() { return cOpANDTerminalRuleCall_1_1_0; }
		
		//right=RelExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//RelExpr
		public RuleCall getRightRelExprParserRuleCall_1_2_0() { return cRightRelExprParserRuleCall_1_2_0; }
	}
	public class RelExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.RelExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAddExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpREL_OPTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAddExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//RelExpr Expression:
		//	AddExpr ({Operation.left=current} op=REL_OP right=AddExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AddExpr ({Operation.left=current} op=REL_OP right=AddExpr)*
		public Group getGroup() { return cGroup; }
		
		//AddExpr
		public RuleCall getAddExprParserRuleCall_0() { return cAddExprParserRuleCall_0; }
		
		//({Operation.left=current} op=REL_OP right=AddExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Operation.left=current}
		public Action getOperationLeftAction_1_0() { return cOperationLeftAction_1_0; }
		
		//op=REL_OP
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//REL_OP
		public RuleCall getOpREL_OPTerminalRuleCall_1_1_0() { return cOpREL_OPTerminalRuleCall_1_1_0; }
		
		//right=AddExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AddExpr
		public RuleCall getRightAddExprParserRuleCall_1_2_0() { return cRightAddExprParserRuleCall_1_2_0; }
	}
	public class AddExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.AddExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final RuleCall cOpPLUSTerminalRuleCall_1_1_0_0 = (RuleCall)cOpAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cOpMINUSTerminalRuleCall_1_1_0_1 = (RuleCall)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AddExpr Expression:
		//	MultExpr ({Operation.left=current} op=(PLUS | MINUS) right=MultExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MultExpr ({Operation.left=current} op=(PLUS | MINUS) right=MultExpr)*
		public Group getGroup() { return cGroup; }
		
		//MultExpr
		public RuleCall getMultExprParserRuleCall_0() { return cMultExprParserRuleCall_0; }
		
		//({Operation.left=current} op=(PLUS | MINUS) right=MultExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Operation.left=current}
		public Action getOperationLeftAction_1_0() { return cOperationLeftAction_1_0; }
		
		//op=(PLUS | MINUS)
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//(PLUS | MINUS)
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//PLUS
		public RuleCall getOpPLUSTerminalRuleCall_1_1_0_0() { return cOpPLUSTerminalRuleCall_1_1_0_0; }
		
		//MINUS
		public RuleCall getOpMINUSTerminalRuleCall_1_1_0_1() { return cOpMINUSTerminalRuleCall_1_1_0_1; }
		
		//right=MultExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//MultExpr
		public RuleCall getRightMultExprParserRuleCall_1_2_0() { return cRightMultExprParserRuleCall_1_2_0; }
	}
	public class MultExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.MultExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cUnaryExprParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cAtomParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final RuleCall cOpMULTTerminalRuleCall_1_1_0_0 = (RuleCall)cOpAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cOpDIVTerminalRuleCall_1_1_0_1 = (RuleCall)cOpAlternatives_1_1_0.eContents().get(1);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final Assignment cRightAssignment_1_2_0 = (Assignment)cAlternatives_1_2.eContents().get(0);
		private final RuleCall cRightUnaryExprParserRuleCall_1_2_0_0 = (RuleCall)cRightAssignment_1_2_0.eContents().get(0);
		private final Assignment cRightAssignment_1_2_1 = (Assignment)cAlternatives_1_2.eContents().get(1);
		private final RuleCall cRightAtomParserRuleCall_1_2_1_0 = (RuleCall)cRightAssignment_1_2_1.eContents().get(0);
		
		//MultExpr Expression:
		//	(UnaryExpr | Atom) ({Operation.left=current} op=(MULT | DIV) (right=UnaryExpr | right=Atom))*;
		@Override public ParserRule getRule() { return rule; }
		
		//(UnaryExpr | Atom) ({Operation.left=current} op=(MULT | DIV) (right=UnaryExpr | right=Atom))*
		public Group getGroup() { return cGroup; }
		
		//(UnaryExpr | Atom)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//UnaryExpr
		public RuleCall getUnaryExprParserRuleCall_0_0() { return cUnaryExprParserRuleCall_0_0; }
		
		//Atom
		public RuleCall getAtomParserRuleCall_0_1() { return cAtomParserRuleCall_0_1; }
		
		//({Operation.left=current} op=(MULT | DIV) (right=UnaryExpr | right=Atom))*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Operation.left=current}
		public Action getOperationLeftAction_1_0() { return cOperationLeftAction_1_0; }
		
		//op=(MULT | DIV)
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//(MULT | DIV)
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//MULT
		public RuleCall getOpMULTTerminalRuleCall_1_1_0_0() { return cOpMULTTerminalRuleCall_1_1_0_0; }
		
		//DIV
		public RuleCall getOpDIVTerminalRuleCall_1_1_0_1() { return cOpDIVTerminalRuleCall_1_1_0_1; }
		
		//(right=UnaryExpr | right=Atom)
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }
		
		//right=UnaryExpr
		public Assignment getRightAssignment_1_2_0() { return cRightAssignment_1_2_0; }
		
		//UnaryExpr
		public RuleCall getRightUnaryExprParserRuleCall_1_2_0_0() { return cRightUnaryExprParserRuleCall_1_2_0_0; }
		
		//right=Atom
		public Assignment getRightAssignment_1_2_1() { return cRightAssignment_1_2_1; }
		
		//Atom
		public RuleCall getRightAtomParserRuleCall_1_2_1_0() { return cRightAtomParserRuleCall_1_2_1_0; }
	}
	public class UnaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.UnaryExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnaryOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0 = (Alternatives)cOpAssignment_1.eContents().get(0);
		private final RuleCall cOpNOTTerminalRuleCall_1_0_0 = (RuleCall)cOpAlternatives_1_0.eContents().get(0);
		private final RuleCall cOpMINUSTerminalRuleCall_1_0_1 = (RuleCall)cOpAlternatives_1_0.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightAtomParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//UnaryExpr Expression:
		//	{UnaryOperation} op=(NOT | MINUS) right=Atom;
		@Override public ParserRule getRule() { return rule; }
		
		//{UnaryOperation} op=(NOT | MINUS) right=Atom
		public Group getGroup() { return cGroup; }
		
		//{UnaryOperation}
		public Action getUnaryOperationAction_0() { return cUnaryOperationAction_0; }
		
		//op=(NOT | MINUS)
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//(NOT | MINUS)
		public Alternatives getOpAlternatives_1_0() { return cOpAlternatives_1_0; }
		
		//NOT
		public RuleCall getOpNOTTerminalRuleCall_1_0_0() { return cOpNOTTerminalRuleCall_1_0_0; }
		
		//MINUS
		public RuleCall getOpMINUSTerminalRuleCall_1_0_1() { return cOpMINUSTerminalRuleCall_1_0_1; }
		
		//right=Atom
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//Atom
		public RuleCall getRightAtomParserRuleCall_2_0() { return cRightAtomParserRuleCall_2_0; }
	}
	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.Atom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cVarParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Action cOperationLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Keyword cOpTouchesKeyword_1_1_1_0 = (Keyword)cOpAssignment_1_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightVarParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cExprVarAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExprAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_2_2_0 = (RuleCall)cExprAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//Atom Expression:
		//	{IntLiteral} value=INT | Var ({Operation.left=current} op='touches' right=Var)? | {ExprVar} '(' expr=Expr ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{IntLiteral} value=INT | Var ({Operation.left=current} op='touches' right=Var)? | {ExprVar} '(' expr=Expr ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntLiteral} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntLiteral}
		public Action getIntLiteralAction_0_0() { return cIntLiteralAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//Var ({Operation.left=current} op='touches' right=Var)?
		public Group getGroup_1() { return cGroup_1; }
		
		//Var
		public RuleCall getVarParserRuleCall_1_0() { return cVarParserRuleCall_1_0; }
		
		//({Operation.left=current} op='touches' right=Var)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{Operation.left=current}
		public Action getOperationLeftAction_1_1_0() { return cOperationLeftAction_1_1_0; }
		
		//op='touches'
		public Assignment getOpAssignment_1_1_1() { return cOpAssignment_1_1_1; }
		
		//'touches'
		public Keyword getOpTouchesKeyword_1_1_1_0() { return cOpTouchesKeyword_1_1_1_0; }
		
		//right=Var
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//Var
		public RuleCall getRightVarParserRuleCall_1_1_2_0() { return cRightVarParserRuleCall_1_1_2_0; }
		
		//{ExprVar} '(' expr=Expr ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//{ExprVar}
		public Action getExprVarAction_2_0() { return cExprVarAction_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//expr=Expr
		public Assignment getExprAssignment_2_2() { return cExprAssignment_2_2; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_2_2_0() { return cExprExprParserRuleCall_2_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}
	
	
	private final GameElements pGame;
	private final DeclElements pDecl;
	private final VarDeclElements pVarDecl;
	private final InitElements pInit;
	private final ObjDeclElements pObjDecl;
	private final AttrAssListElements pAttrAssList;
	private final AttrAssElements pAttrAss;
	private final StmtBlockElements pStmtBlock;
	private final StmtElements pStmt;
	private final IfStmtElements pIfStmt;
	private final ForStmtElements pForStmt;
	private final AssStmtElements pAssStmt;
	private final BlockElements pBlock;
	private final AnimBlockElements pAnimBlock;
	private final EventBlockElements pEventBlock;
	private final VarElements pVar;
	private final VarArrayElements pVarArray;
	private final VarPropElements pVarProp;
	private final ExprElements pExpr;
	private final OrExprElements pOrExpr;
	private final AndExprElements pAndExpr;
	private final RelExprElements pRelExpr;
	private final AddExprElements pAddExpr;
	private final MultExprElements pMultExpr;
	private final UnaryExprElements pUnaryExpr;
	private final AtomElements pAtom;
	private final TerminalRule tOBJTYPE;
	private final TerminalRule tKEYSTROKE;
	private final TerminalRule tOR;
	private final TerminalRule tAND;
	private final TerminalRule tREL_OP;
	private final TerminalRule tMULT;
	private final TerminalRule tDIV;
	private final TerminalRule tNOT;
	private final TerminalRule tMINUS;
	private final TerminalRule tPLUS;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MGPLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGame = new GameElements();
		this.pDecl = new DeclElements();
		this.pVarDecl = new VarDeclElements();
		this.pInit = new InitElements();
		this.pObjDecl = new ObjDeclElements();
		this.pAttrAssList = new AttrAssListElements();
		this.pAttrAss = new AttrAssElements();
		this.pStmtBlock = new StmtBlockElements();
		this.pStmt = new StmtElements();
		this.pIfStmt = new IfStmtElements();
		this.pForStmt = new ForStmtElements();
		this.pAssStmt = new AssStmtElements();
		this.pBlock = new BlockElements();
		this.pAnimBlock = new AnimBlockElements();
		this.pEventBlock = new EventBlockElements();
		this.pVar = new VarElements();
		this.pVarArray = new VarArrayElements();
		this.pVarProp = new VarPropElements();
		this.pExpr = new ExprElements();
		this.pOrExpr = new OrExprElements();
		this.pAndExpr = new AndExprElements();
		this.pRelExpr = new RelExprElements();
		this.pAddExpr = new AddExprElements();
		this.pMultExpr = new MultExprElements();
		this.pUnaryExpr = new UnaryExprElements();
		this.pAtom = new AtomElements();
		this.tOBJTYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.OBJTYPE");
		this.tKEYSTROKE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.KEYSTROKE");
		this.tOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.OR");
		this.tAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.AND");
		this.tREL_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.REL_OP");
		this.tMULT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.MULT");
		this.tDIV = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.DIV");
		this.tNOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.NOT");
		this.tMINUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.MINUS");
		this.tPLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MGPL.PLUS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MGPL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Game:
	//	'game' name=ID '(' attrAssList=AttrAssList? ')' decl+=Decl* initBlock=StmtBlock functions+=Block*;
	public GameElements getGameAccess() {
		return pGame;
	}
	
	public ParserRule getGameRule() {
		return getGameAccess().getRule();
	}
	
	//Decl:
	//	VarDecl ';' | ObjDecl ';';
	public DeclElements getDeclAccess() {
		return pDecl;
	}
	
	public ParserRule getDeclRule() {
		return getDeclAccess().getRule();
	}
	
	//VarDecl:
	//	type='int' name=ID value=Init? | type='int' name=ID '[' arrSize=INT ']';
	public VarDeclElements getVarDeclAccess() {
		return pVarDecl;
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}
	
	//Init:
	//	'=' expr=Expr;
	public InitElements getInitAccess() {
		return pInit;
	}
	
	public ParserRule getInitRule() {
		return getInitAccess().getRule();
	}
	
	//ObjDecl:
	//	type=OBJTYPE name=ID '(' attrAssList=AttrAssList? ')' | type=OBJTYPE name=ID '[' arrSize=INT ']';
	public ObjDeclElements getObjDeclAccess() {
		return pObjDecl;
	}
	
	public ParserRule getObjDeclRule() {
		return getObjDeclAccess().getRule();
	}
	
	//AttrAssList:
	//	attrAss+=AttrAss (',' attrAss+=AttrAss)*;
	public AttrAssListElements getAttrAssListAccess() {
		return pAttrAssList;
	}
	
	public ParserRule getAttrAssListRule() {
		return getAttrAssListAccess().getRule();
	}
	
	//AttrAss:
	//	name=ID '=' expr=Expr;
	public AttrAssElements getAttrAssAccess() {
		return pAttrAss;
	}
	
	public ParserRule getAttrAssRule() {
		return getAttrAssAccess().getRule();
	}
	
	//StmtBlock:
	//	'{' statments+=Stmt* '}';
	public StmtBlockElements getStmtBlockAccess() {
		return pStmtBlock;
	}
	
	public ParserRule getStmtBlockRule() {
		return getStmtBlockAccess().getRule();
	}
	
	//Stmt:
	//	IfStmt | ForStmt | AssStmt ';';
	public StmtElements getStmtAccess() {
		return pStmt;
	}
	
	public ParserRule getStmtRule() {
		return getStmtAccess().getRule();
	}
	
	//IfStmt:
	//	'if' '(' Expr ')' consequence=StmtBlock ('else' alternative=StmtBlock)?;
	public IfStmtElements getIfStmtAccess() {
		return pIfStmt;
	}
	
	public ParserRule getIfStmtRule() {
		return getIfStmtAccess().getRule();
	}
	
	//ForStmt:
	//	'for' '(' initStmt=AssStmt ';' endCondition=Expr ';' loopStmt=AssStmt ')' stmtBlock=StmtBlock;
	public ForStmtElements getForStmtAccess() {
		return pForStmt;
	}
	
	public ParserRule getForStmtRule() {
		return getForStmtAccess().getRule();
	}
	
	//AssStmt:
	//	var=Var '=' assignment=Expr;
	public AssStmtElements getAssStmtAccess() {
		return pAssStmt;
	}
	
	public ParserRule getAssStmtRule() {
		return getAssStmtAccess().getRule();
	}
	
	//Block:
	//	AnimBlock | EventBlock;
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//AnimBlock:
	//	'animation' name=ID '(' objType=OBJTYPE objName=ID ')' stmtBlock=StmtBlock;
	public AnimBlockElements getAnimBlockAccess() {
		return pAnimBlock;
	}
	
	public ParserRule getAnimBlockRule() {
		return getAnimBlockAccess().getRule();
	}
	
	//EventBlock:
	//	'on' key=KEYSTROKE stmtBlock=StmtBlock;
	public EventBlockElements getEventBlockAccess() {
		return pEventBlock;
	}
	
	public ParserRule getEventBlockRule() {
		return getEventBlockAccess().getRule();
	}
	
	//Var:
	//	name=ID varArray=VarArray? varProp=VarProp?;
	public VarElements getVarAccess() {
		return pVar;
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}
	
	//VarArray:
	//	'[' indexExpr=Expr ']';
	public VarArrayElements getVarArrayAccess() {
		return pVarArray;
	}
	
	public ParserRule getVarArrayRule() {
		return getVarArrayAccess().getRule();
	}
	
	//VarProp:
	//	'.' extId=ID;
	public VarPropElements getVarPropAccess() {
		return pVarProp;
	}
	
	public ParserRule getVarPropRule() {
		return getVarPropAccess().getRule();
	}
	
	//Expr Expression:
	//	OrExpr;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}
	
	//OrExpr Expression:
	//	AndExpr ({Operation.left=current} op=OR right=AndExpr)*;
	public OrExprElements getOrExprAccess() {
		return pOrExpr;
	}
	
	public ParserRule getOrExprRule() {
		return getOrExprAccess().getRule();
	}
	
	//AndExpr Expression:
	//	RelExpr ({Operation.left=current} op=AND right=RelExpr)*;
	public AndExprElements getAndExprAccess() {
		return pAndExpr;
	}
	
	public ParserRule getAndExprRule() {
		return getAndExprAccess().getRule();
	}
	
	//RelExpr Expression:
	//	AddExpr ({Operation.left=current} op=REL_OP right=AddExpr)*;
	public RelExprElements getRelExprAccess() {
		return pRelExpr;
	}
	
	public ParserRule getRelExprRule() {
		return getRelExprAccess().getRule();
	}
	
	//AddExpr Expression:
	//	MultExpr ({Operation.left=current} op=(PLUS | MINUS) right=MultExpr)*;
	public AddExprElements getAddExprAccess() {
		return pAddExpr;
	}
	
	public ParserRule getAddExprRule() {
		return getAddExprAccess().getRule();
	}
	
	//MultExpr Expression:
	//	(UnaryExpr | Atom) ({Operation.left=current} op=(MULT | DIV) (right=UnaryExpr | right=Atom))*;
	public MultExprElements getMultExprAccess() {
		return pMultExpr;
	}
	
	public ParserRule getMultExprRule() {
		return getMultExprAccess().getRule();
	}
	
	//UnaryExpr Expression:
	//	{UnaryOperation} op=(NOT | MINUS) right=Atom;
	public UnaryExprElements getUnaryExprAccess() {
		return pUnaryExpr;
	}
	
	public ParserRule getUnaryExprRule() {
		return getUnaryExprAccess().getRule();
	}
	
	//Atom Expression:
	//	{IntLiteral} value=INT | Var ({Operation.left=current} op='touches' right=Var)? | {ExprVar} '(' expr=Expr ')';
	public AtomElements getAtomAccess() {
		return pAtom;
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}
	
	//terminal OBJTYPE:
	//	'rectangle' | 'triangle' | 'circle';
	public TerminalRule getOBJTYPERule() {
		return tOBJTYPE;
	}
	
	//terminal KEYSTROKE:
	//	'space' | 'leftarrow' | 'rightarrow' | 'uparrow' | 'downarrow';
	public TerminalRule getKEYSTROKERule() {
		return tKEYSTROKE;
	}
	
	//terminal OR:
	//	'||';
	public TerminalRule getORRule() {
		return tOR;
	}
	
	//terminal AND:
	//	'&&';
	public TerminalRule getANDRule() {
		return tAND;
	}
	
	//terminal REL_OP:
	//	'==' | '<' | '<=';
	public TerminalRule getREL_OPRule() {
		return tREL_OP;
	}
	
	//terminal MULT:
	//	'*';
	public TerminalRule getMULTRule() {
		return tMULT;
	}
	
	//terminal DIV:
	//	'/';
	public TerminalRule getDIVRule() {
		return tDIV;
	}
	
	//terminal NOT:
	//	'!';
	public TerminalRule getNOTRule() {
		return tNOT;
	}
	
	//terminal MINUS:
	//	'-';
	public TerminalRule getMINUSRule() {
		return tMINUS;
	}
	
	//terminal PLUS:
	//	'+';
	public TerminalRule getPLUSRule() {
		return tPLUS;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
